/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,14],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,23],$V7=[1,26],$V8=[1,36],$V9=[1,37],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,35],$Vk=[1,34],$Vl=[1,27],$Vm=[2,5,17,21,22,23,24,27,37,39,40,41,42,43,44,47,48,49,50,53,54,55,58,62,64,68],$Vn=[1,46],$Vo=[1,47],$Vp=[1,70],$Vq=[1,67],$Vr=[1,66],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,68],$VE=[1,69],$VF=[1,71],$VG=[1,72],$VH=[1,73],$VI=[1,74],$VJ=[1,78],$VK=[21,32,49],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[1,112],$VW=[1,113],$VX=[1,114],$VY=[1,115],$VZ=[1,116],$V_=[18,33,38,46,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,101],$V$=[1,133],$V01=[1,137],$V11=[18,31,32,38],$V21=[2,93],$V31=[1,158],$V41=[38,46],$V51=[18,33,38,46,63,82,83,101],$V61=[2,5,17,21,22,23,24,27,37,39,40,41,42,43,44,47,48,49,50,51,53,54,55,58,62,64,68],$V71=[18,33,38,46,63,70,71,76,77,78,79,80,81,82,83,101],$V81=[18,33,38,46,63,70,71,72,73,76,77,78,79,80,81,82,83,101],$V91=[18,33,38,46,63,70,71,72,73,74,76,77,78,79,80,81,82,83,101],$Va1=[18,33,38,46,63,76,77,78,79,80,81,82,83,101],$Vb1=[1,235],$Vc1=[1,236],$Vd1=[1,237],$Ve1=[1,239],$Vf1=[1,229],$Vg1=[1,278],$Vh1=[1,277],$Vi1=[50,62,64],$Vj1=[1,339],$Vk1=[33,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRCCION":6,"DECLARACION":7,"DECLARACION2":8,"STARTWITH":9,"WRITELINE":10,"ASIGNACION":11,"SENTENCIA_IF":12,"SENTENCIA_IF_SIMPLE":13,"BLOQUE":14,"SENTENCIA_WHILE":15,"SENTENCIA_DO_WHILE":16,"break":17,"puntocoma":18,"SENTENCIA_SWITCH":19,"SENTENCIA_FOR":20,"id":21,"decremento":22,"incremento":23,"continue":24,"FUNCIONES":25,"LLAMADA":26,"return":27,"E":28,"TIPO":29,"LISTA_IDS":30,"igual":31,"corchetea":32,"corchetec":33,"new":34,"LISTASIMPLE":35,"DOUBLEARRAY":36,"const":37,"coma":38,"int":39,"double":40,"string":41,"char":42,"boolean":43,"println":44,"parentesisa":45,"parentesisc":46,"print":47,"if":48,"llavea":49,"llavec":50,"else":51,"INSTRUCCION_IF_SIMPLE":52,"while":53,"do":54,"for":55,"DEC_ASIG_FOR":56,"ACTUALIZACION_FOR":57,"switch":58,"CASELIST":59,"DEFAULT":60,"CASO":61,"case":62,"dospuntos":63,"default":64,"LISTA_DE_PARAMETROS":65,"void":66,"LISTA_VALORES":67,"run":68,"LLAMADEEE":69,"mas":70,"menos":71,"multiplicacion":72,"division":73,"potencia":74,"modulo":75,"mayorigual":76,"mayorque":77,"menorigual":78,"menorque":79,"dobleigual":80,"diferente":81,"and":82,"or":83,"not":84,"casteodouble":85,"casteoint":86,"casteostring":87,"casteochar":88,"casteotipo":89,"casteotolower":90,"casteotoupper":91,"length":92,"chararray":93,"round":94,"decimal":95,"entero":96,"cadena":97,"caracter":98,"true":99,"false":100,"interrogacion":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"break",18:"puntocoma",21:"id",22:"decremento",23:"incremento",24:"continue",27:"return",31:"igual",32:"corchetea",33:"corchetec",34:"new",37:"const",38:"coma",39:"int",40:"double",41:"string",42:"char",43:"boolean",44:"println",45:"parentesisa",46:"parentesisc",47:"print",48:"if",49:"llavea",50:"llavec",51:"else",53:"while",54:"do",55:"for",58:"switch",62:"case",63:"dospuntos",64:"default",66:"void",68:"run",70:"mas",71:"menos",72:"multiplicacion",73:"division",74:"potencia",75:"modulo",76:"mayorigual",77:"mayorque",78:"menorigual",79:"menorque",80:"dobleigual",81:"diferente",82:"and",83:"or",84:"not",85:"casteodouble",86:"casteoint",87:"casteostring",88:"casteochar",89:"casteotipo",90:"casteotolower",91:"casteotoupper",92:"length",93:"chararray",94:"round",95:"decimal",96:"entero",97:"cadena",98:"caracter",99:"true",100:"false",101:"interrogacion"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,3],[6,3],[6,3],[6,2],[6,1],[6,2],[6,2],[6,3],[6,1],[7,5],[7,3],[7,11],[7,10],[7,16],[7,7],[7,13],[8,6],[36,5],[36,3],[35,3],[35,1],[29,1],[29,1],[29,1],[29,1],[29,1],[30,3],[30,1],[10,5],[10,5],[11,4],[11,7],[11,10],[12,7],[12,11],[12,9],[13,5],[13,7],[13,7],[52,1],[52,1],[52,1],[52,1],[52,2],[52,3],[52,3],[52,2],[52,2],[52,2],[52,3],[14,3],[15,7],[16,9],[20,11],[56,4],[56,3],[57,2],[57,2],[57,3],[19,7],[19,8],[19,7],[59,2],[59,1],[61,4],[60,3],[25,9],[25,8],[25,9],[25,8],[65,4],[65,2],[65,4],[65,6],[26,4],[26,3],[67,3],[67,1],[9,3],[69,4],[69,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,2],[28,4],[28,2],[28,4],[28,4],[28,4],[28,4],[28,4],[28,4],[28,2],[28,3],[28,1],[28,1],[28,1],[28,4],[28,7],[28,1],[28,1],[28,1],[28,1],[28,5],[28,2],[28,2],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 80:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 45: case 81: case 95:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 57: case 58:
 this.$ =  $$[$0];
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 15: case 16: case 22: case 59: case 60: case 138:
 this.$ = $$[$0]; 
break;
case 14: case 61:
 this.$ = new detener.default(); 
break;
case 17: case 62:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 18: case 63:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 19:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 20:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 21: case 64:
 this.$ = new continuar.default(); 
break;
case 23: case 65: case 125:
 this.$ = $$[$0-1]; 
break;
case 24: case 66:
 this.$ = new retorno.default(null); 
break;
case 25: case 67:
 this.$ = new retorno.default($$[$0-1]); 
break;
case 26:
 console.log("Error Sintactico: " + yytext 
                                    + " linea: " + this._$.first_line 
                                    + " columna: " + this._$.first_column); 
                        
                                new errores.default("Sintactico", "No se esperaba el caracter "+ yytext , 
                                                this._$.first_line ,this._$.first_column);            
                            
break;
case 27:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],_$[$0-4].first_line, _$[$0-4].last_column);
break;
case 28:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 29:
 this.$ = new declaracion.default($$[$0-10], $$[$0-9], null,  _$[$0-10].first_line, _$[$0-10].last_column,$$[$0-4],$$[$0-2]);
break;
case 30:
 this.$ = new declaracion.default($$[$0-9], $$[$0-8], null,  _$[$0-9].first_line, _$[$0-9].last_column,$$[$0-9],$$[$0-6]);
break;
case 31:
 this.$ = new declaracion.default($$[$0-15], $$[$0-14], null,  _$[$0-15].first_line, _$[$0-15].last_column);
break;
case 32:
 this.$ = new declaracion.default($$[$0-6], $$[$0-3], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 33:
 this.$ = new declaracion.default($$[$0-12], $$[$0-11], null,  _$[$0-12].first_line, _$[$0-12].last_column,$$[$0-12],$$[$0-9],$$[$0-6],$$[$0-2]);
break;
case 34:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],  _$[$0-5].first_line, _$[$0-5].last_column, null, null, null, null, $$[$0-5]);
break;
case 35:
 this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 36:
this.$= new Array(); this.$.push($$[$0-1]);
break;
case 37:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 38:
this.$= new Array(); this.$.push($$[$0]);
break;
case 39:
this.$ = new tipo.default("ENTERO"); 
break;
case 40:
this.$ = new tipo.default("DOBLE"); 
break;
case 41:
this.$ = new tipo.default("CADENA"); 
break;
case 42:
this.$ = new tipo.default("CARACTER"); 
break;
case 43:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 44: case 94:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 46:
 this.$ = new writeline.default($$[$0-2],true,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 47:
 this.$ = new writeline.default($$[$0-2],false,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 48:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 49:
 this.$ = new asignacion.default($$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column,$$[$0-4]); 
break;
case 50:
 this.$ = new asignacion.default($$[$0-9], $$[$0-1], _$[$0-9].first_line, _$[$0-9].last_column,$$[$0-7],$$[$0-4]); 
break;
case 51:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 52:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 53:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 68:
 this.$ = new bloque.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 69:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);  
break;
case 70:
 this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].last_column);  
break;
case 71:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 72:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],  _$[$0-3].first_line, _$[$0-3].last_column);
break;
case 73: case 76:
 this.$ = new asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 74:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 75:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 77:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 78:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 79:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 82:
 this.$ = new caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 83:
 this.$ = new caso.default(null, $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 84:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-8], $$[$0-6], false, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 85:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-7], [], false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 86:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-8], $$[$0-6], true, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 87:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-7], [], true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 88:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 89:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 90:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-3], $$[$0], null)); 
break;
case 91:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-5], $$[$0], null)); 
break;
case 92: case 97:
this.$ = new llamada.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 93: case 98:
this.$ = new llamada.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 96:
 this.$ = new startwith.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].last_column );
break;
case 99:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 100:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 101:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 102:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 103:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 104:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 105:
 this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 106:
 this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 107:
 this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 108:
 this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 109:
 this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 110:
 this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 111:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 112:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 113:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 114:
 this.$ = new logica.default($$[$0], '(double)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 115:
 this.$ = new logica.default($$[$0], '(int)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 116:
 this.$ = new logica.default($$[$0-1], '(string)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 117:
 this.$ = new logica.default($$[$0], '(char)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 118:
 this.$ = new logica.default($$[$0-1], '(tipo)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 119:
 this.$ = new logica.default($$[$0-1], '(lower)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 120:
 this.$ = new logica.default($$[$0-1], '(upper)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 121:
 this.$ = new logica.default($$[$0-1], '(length)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 122:
 this.$ = new logica.default($$[$0-1], '(chararray)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 123:
 this.$ = new logica.default($$[$0-1], '(round)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 124:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 126:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', _$[$0].first_line, _$[$0].last_column); 
break;
case 127:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', _$[$0].first_line, _$[$0].last_column); 
break;
case 128:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 129:
 this.$ = new identificador.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column,$$[$0-1]); 
break;
case 130:
 this.$ = new identificador.default($$[$0-6], _$[$0-6].first_line, _$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 131:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', _$[$0].first_line, _$[$0].last_column); 
break;
case 132:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].last_column); 
break;
case 133:
 this.$ = new primitivo.default(true, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 134:
 this.$ = new primitivo.default(false, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 135:
 this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 136:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 137:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),{18:[1,43]},o($Vm,[2,15]),o($Vm,[2,16]),{22:[1,44],23:[1,45],31:$Vn,32:$Vo,45:[1,48]},{21:[1,49]},{21:[1,50]},{18:[1,51]},o($Vm,[2,22]),{18:[1,52]},{18:[1,53],21:$Vp,26:75,28:54,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($Vm,[2,26]),{21:$VJ,30:76,32:[1,77]},{29:79,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc},{21:[1,81],69:80},{45:[1,82]},{45:[1,83]},{45:[1,84]},{2:$V0,4:85,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{45:[1,86]},{49:[1,87]},{45:[1,88]},{45:[1,89]},o($VK,[2,39]),o($VK,[2,40]),o($VK,[2,41]),o($VK,[2,42]),o($VK,[2,43]),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,14]),{18:[1,90]},{18:[1,91]},{21:$Vp,26:75,28:92,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:93,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:98,29:97,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,45:$Vq,46:[1,95],65:94,67:96,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[1,99]},{18:[1,100]},o($Vm,[2,21]),o($Vm,[2,23]),o($Vm,[2,24]),{18:[1,101],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{21:$Vp,26:75,28:117,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:118,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:119,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{45:[1,120]},{21:$Vp,26:75,28:121,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{45:[1,122]},{45:[1,123]},{45:[1,124]},{45:[1,125]},{45:[1,126]},{45:[1,127]},{21:$Vp,26:75,28:128,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:129,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V_,[2,126]),o($V_,[2,127]),o($V_,[2,128],{22:[1,132],23:[1,131],32:[1,130],45:$V$}),o($V_,[2,131]),o($V_,[2,132]),o($V_,[2,133]),o($V_,[2,134]),o($V_,[2,138]),{18:[1,135],31:[1,134],32:[1,136],38:$V01},{33:[1,138]},o($V11,[2,45]),{21:$VJ,30:139},{18:[1,140]},{45:[1,141]},{21:$Vp,26:75,28:142,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:143,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:144,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,145],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{21:$Vp,26:75,28:146,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{2:$V0,4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{21:$Vp,26:75,28:148,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:[1,151],29:150,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,56:149},o($Vm,[2,17]),o($Vm,[2,18]),{18:[1,152],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{33:[1,153],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{38:[1,155],46:[1,154]},{18:$V21,63:[1,156]},{38:$V31,46:[1,157]},{21:[1,159],32:[1,160]},o($V41,[2,95],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ}),o($Vm,[2,19]),o($Vm,[2,20]),o($Vm,[2,25]),{21:$Vp,26:75,28:161,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:162,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:163,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:164,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:165,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:166,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:167,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:168,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:169,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:170,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:171,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:172,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:173,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:174,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:175,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V51,[2,113],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW}),o($V51,[2,114],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW}),o($V51,[2,115],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW}),{21:$Vp,26:75,28:176,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V51,[2,117],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW}),{21:$Vp,26:75,28:177,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:178,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:179,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:180,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:181,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:182,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V_,[2,124]),{46:[1,183],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{21:$Vp,26:75,28:184,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V_,[2,136]),o($V_,[2,137]),{21:$Vp,26:75,28:98,45:$Vq,46:[1,185],67:96,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:186,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V61,[2,28]),{21:$Vp,26:75,28:188,33:[1,187],45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:[1,189]},{21:$VJ,30:190},{31:[1,191],38:$V01},o($Vm,[2,96]),{21:$Vp,26:75,28:98,45:$Vq,46:[1,193],67:192,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{46:[1,194],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,195],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,196],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($Vm,[2,68]),{46:[1,197],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,198],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{46:[1,199],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{18:[1,200]},{21:[1,201]},{31:[1,202]},o($V61,[2,48]),{31:[1,203],32:[1,204]},{63:[1,205]},{29:206,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc},{29:207,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,66:[1,208]},o($V_,[2,92]),{21:$Vp,26:75,28:209,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V41,[2,89]),{33:[1,210]},o($V71,[2,99],{72:$VN,73:$VO,74:$VP,75:$VQ}),o($V71,[2,100],{72:$VN,73:$VO,74:$VP,75:$VQ}),o($V81,[2,101],{74:$VP,75:$VQ}),o($V81,[2,102],{74:$VP,75:$VQ}),o($V91,[2,103],{75:$VQ}),o($V91,[2,104],{75:$VQ}),o($Va1,[2,105],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($Va1,[2,106],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($Va1,[2,107],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($Va1,[2,108],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($Va1,[2,109],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($Va1,[2,110],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ}),o($V51,[2,111],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW}),o([18,33,38,46,63,83,101],[2,112],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX}),{63:[1,211],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,212],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,213],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,214],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,215],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,216],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,217],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,218],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V_,[2,125]),{33:[1,219],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V_,$V21),{18:[1,220],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{31:[1,221],32:[1,222]},{33:[1,223],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V11,[2,44]),{31:[1,224],38:$V01},{21:$Vp,26:75,28:225,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{38:$V31,46:[1,226]},{18:[2,98]},{18:[1,227]},{18:[1,228]},{7:231,8:232,10:233,11:234,17:$Vb1,21:$Vc1,24:$Vd1,26:238,27:$Ve1,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,49:$Vf1,52:230},{49:[1,240]},{53:[1,241]},{49:[1,242]},{21:$Vp,26:75,28:243,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{31:[1,244]},{21:$Vp,26:75,28:245,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:246,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:$Vp,26:75,28:247,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{29:248,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,66:[1,249]},{21:[1,250]},{49:[1,251]},{49:[1,252]},o($V41,[2,94],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ}),{21:[1,253],32:[1,254]},{21:$Vp,26:75,28:255,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V_,[2,116]),o($V_,[2,118]),o($V_,[2,119]),o($V_,[2,120]),o($V_,[2,121]),o($V_,[2,122]),o($V_,[2,123]),o($V_,[2,129],{32:[1,256]}),o($V61,[2,27]),{34:[1,257]},{33:[1,258]},{31:[1,259],32:[1,260]},{21:$Vp,26:75,28:261,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[1,262],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{18:[2,97]},o($V61,[2,46]),o($V61,[2,47]),{2:$V0,4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($Vm,[2,54],{51:[1,264]}),o($V61,[2,57]),o($V61,[2,58]),o($V61,[2,59]),o($V61,[2,60]),{18:[1,265]},{22:[1,266],23:[1,267],31:$Vn,32:$Vo,45:$V$},{18:[1,268]},{18:[1,269]},{18:[1,270],21:$Vp,26:75,28:271,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{2:$V0,4:272,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{45:[1,273]},{59:274,60:275,61:276,62:$Vg1,64:$Vh1},{18:[1,279],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{21:$Vp,26:75,28:280,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[2,73],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{18:[1,281],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{33:[1,282],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{49:[1,283]},{49:[1,284]},o($V41,[2,88]),{2:$V0,4:285,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,4:286,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($V41,[2,90]),{33:[1,287]},o([18,33,38,46,63],[2,135],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ}),{21:$Vp,26:75,28:288,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{29:289,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc},{31:[1,290]},{32:[1,291]},{21:$Vp,26:75,28:292,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[1,293],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V61,[2,34]),{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,294],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{7:231,8:232,10:233,11:234,13:296,17:$Vb1,21:$Vc1,24:$Vd1,26:238,27:$Ve1,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:[1,297],52:295},o($V61,[2,61]),{18:[1,298]},{18:[1,299]},o($V61,[2,64]),o($V61,[2,65]),o($V61,[2,66]),{18:[1,300],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,301],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{21:$Vp,26:75,28:302,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{50:[1,303],60:304,61:305,62:$Vg1,64:$Vh1},{50:[1,306]},o($Vi1,[2,81]),{63:[1,307]},{21:$Vp,26:75,28:308,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{21:[1,310],57:309},{18:[2,72],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V61,[2,49]),{31:[1,311]},{2:$V0,4:312,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,4:313,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,314],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,315],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{21:[1,316]},{33:[1,317],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{32:[1,318]},{34:[1,319]},{21:$Vp,26:75,28:321,35:320,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{33:[1,322],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V61,[2,32]),o($Vm,[2,51],{51:[1,323]}),o($Vm,[2,55]),o($Vm,[2,56]),{45:[1,324]},o($V61,[2,62]),o($V61,[2,63]),o($V61,[2,67]),o($Vm,[2,69]),{46:[1,325],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($Vm,[2,77]),{50:[1,326]},o($Vi1,[2,80]),o($Vm,[2,79]),{2:$V0,4:327,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{63:[1,328],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{46:[1,329]},{22:[1,330],23:[1,331],31:[1,332]},{21:$Vp,26:75,28:333,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,334],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,335],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($Vm,[2,85]),o($Vm,[2,87]),o($V41,[2,91]),o($V_,[2,130]),{21:$Vp,26:75,28:336,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{29:337,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc},{33:[1,338],38:$Vj1},o($Vk1,[2,38],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ}),{31:[1,340]},{12:342,48:[1,343],49:[1,341]},{21:$Vp,26:75,28:344,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[1,345]},o($Vm,[2,78]),{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[2,83],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{2:$V0,4:346,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{49:[1,347]},{46:[2,74]},{46:[2,75]},{21:$Vp,26:75,28:348,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{18:[1,349],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($Vm,[2,84]),o($Vm,[2,86]),{33:[1,350],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{32:[1,351]},{18:[1,352]},{21:$Vp,26:75,28:353,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{32:[1,354]},{2:$V0,4:355,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($Vm,[2,53]),{45:[1,356]},{46:[1,357],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($Vm,[2,70]),o($Vi1,[2,82],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:15,20:16,25:21,26:22,29:25,6:42,2:$V0,17:$V1,21:$V2,22:$V3,23:$V4,24:$V5,27:$V6,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl}),{2:$V0,4:358,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{46:[2,76],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($V61,[2,50]),{18:[1,359]},{21:$Vp,26:75,28:360,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V61,[2,30]),o($Vk1,[2,37],{70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ}),{32:[1,362],36:361},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,363],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},{21:$Vp,26:75,28:364,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},{7:231,8:232,10:233,11:234,17:$Vb1,21:$Vc1,24:$Vd1,26:238,27:$Ve1,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,52:230},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V1,19:15,20:16,21:$V2,22:$V3,23:$V4,24:$V5,25:21,26:22,27:$V6,29:25,37:$V7,39:$V8,40:$V9,41:$Va,42:$Vb,43:$Vc,44:$Vd,47:$Ve,48:$Vf,49:$Vg,50:[1,365],53:$Vh,54:$Vi,55:$Vj,58:$Vk,68:$Vl},o($V61,[2,29]),{33:[1,366],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{33:[1,367],38:[1,368]},{21:$Vp,26:75,28:321,35:369,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($Vm,[2,52]),{46:[1,370],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},o($Vm,[2,71]),{32:[1,371]},{18:[1,372]},{32:[1,373]},{33:[1,374],38:$Vj1},{49:$Vf1},{21:$Vp,26:75,28:375,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($V61,[2,33]),{21:$Vp,26:75,28:321,35:376,45:$Vq,71:$Vr,84:$Vs,85:$Vt,86:$Vu,87:$Vv,88:$Vw,89:$Vx,90:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF,98:$VG,99:$VH,100:$VI},o($Vk1,[2,36]),{33:[1,377],70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR,77:$VS,78:$VT,79:$VU,80:$VV,81:$VW,82:$VX,83:$VY,101:$VZ},{33:[1,378],38:$Vj1},{18:[1,379]},o($Vk1,[2,35]),o($V61,[2,31])],
defaultActions: {41:[2,1],193:[2,98],226:[2,97],330:[2,74],331:[2,75]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const evaluar = require('../Interprete/Evaluar');
        const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
        const primitivo = require('../Interprete/Expresiones/Primitivo');

        const writeline = require('../Interprete/Instrucciones/WriteLine')
        const declaracion = require('../Interprete/Instrucciones/Declaracion')
        const ast = require('../Interprete/Ast/Ast')
        const tipo = require('../Interprete/TablaSimbolos/Tipo')
        const identificador = require('../Interprete/Expresiones/Identificador')

        const relacional = require('../Interprete/Expresiones/Operaciones/Relacional');
        const logica = require('../Interprete/Expresiones/Operaciones/Logica');

        const asignacion = require('../Interprete/Instrucciones/Asignacion');
        const Ifs = require('../Interprete/Instrucciones/SentenciasControl/Ifs');
        const While = require('../Interprete/Instrucciones/SentenciasCiclica/While');
        const DoWhile = require('../Interprete/Instrucciones/SentenciasCiclica/DoWhile');
        const ternario = require('../Interprete/Expresiones/Ternario');
        const detener = require('../Interprete/Instrucciones/SentenciasTransferencia/Break');

        const Switch = require('../Interprete/Instrucciones/SentenciasControl/Switch');
        const caso = require('../Interprete/Instrucciones/SentenciasControl/Caso'); 
        const For = require('../Interprete/Instrucciones/SentenciasCiclica/For');

        const continuar = require('../Interprete/Instrucciones/SentenciasTransferencia/Continue');

        const funcion = require('../Interprete/Instrucciones/Funcion');
        const llamada = require('../Interprete/Instrucciones/Llamada');
        const startwith = require('../Interprete/Instrucciones/StartWith');
        const simbolo = require('../Interprete/TablaSimbolos/Simbolo')
        const retorno = require('../Interprete/Instrucciones/SentenciasTransferencia/Return');

        const bloque = require('../Interprete/Instrucciones/bloque');

        const errores = require('../Interprete/Ast/Errores')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignoramos los comentarios*/
break;
case 1:/*ignoramos los comentarios*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 93
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 86
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 85
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 87
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 88
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 89
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 90
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 91
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 92
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 94
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 22 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 23 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 45 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 46 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 101
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 42: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 43: console.log("Reconocio : " + yy_.yytext);  return 'xor' 
break;
case 44: console.log("Reconocio : " + yy_.yytext);  return 'evaluar' 
break;
case 45: console.log("Reconocio : " + yy_.yytext);  return 99 
break;
case 46: console.log("Reconocio : " + yy_.yytext);  return 100 
break;
case 47: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 48: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 49: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 50: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 51: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 52: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 53: console.log("Reconocio : " + yy_.yytext);  return 'writeline' 
break;
case 54: console.log("Reconocio : " + yy_.yytext);  return 47 
break;
case 55: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 17
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 62: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 64: console.log("Reconocio : "+ yy_.yytext); return 'tostring'
break;
case 65: console.log("Reconocio : "+ yy_.yytext); return 'toupper'
break;
case 66: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 67: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 68: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 69: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 70: console.log("Reconocio : "+ yy_.yytext); return 'call'
break;
case 71: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 74: console.log("Reconocio : " + yy_.yytext);  return 21 
break;
case 75: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 76: console.log("Reconocio : " + yy_.yytext);  return 98 
break;
case 77:
break;
case 78:
break;
case 79:
break;
case 80:
break;
case 81:return 5
break;
case 82: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));

                        new errores.default('Lexico', 'El caracter ' + yy_.yytext 
                                + ' no forma parte del lenguaje', 
                                yy_.yylineno+1, 
                                yy_.yylloc.last_column+1); 
                                      
                        
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[/][/].*)/i,/^(?:tocharArray\b)/i,/^(?:new\b)/i,/^(?:\(int\))/i,/^(?:\(double\))/i,/^(?:toString\b)/i,/^(?:\(char\))/i,/^(?:typeOf\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:==)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:const\b)/i,/^(?:writeline\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_ñÑ]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:('[^\']*'))/i,/^(?:[\s\r\n\t])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}